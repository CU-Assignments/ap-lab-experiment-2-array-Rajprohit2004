class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return 0;  // No jumps needed if there's only one element

        int jumps = 0;          // Count of jumps
        int current_end = 0;    // Farthest index we can reach with the current jump
        int farthest = 0;       // Farthest index we can reach in the next jump

        for (int i = 0; i < n; ++i) {
            farthest = max(farthest, i + nums[i]);  // Update the farthest we can reach from the current index

            if (i == current_end) {
                jumps++;                    // If we've reached the end of the current jump
                current_end = farthest;     // Update the boundary for the next jump

                if (current_end >= n - 1) {  // If we can reach or exceed the last index
                    break;
                }
            }
        }

        return jumps;
    }
};
